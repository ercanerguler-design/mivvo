// Prisma schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String
  surname       String
  email         String    @unique
  hashedPassword String
  emailVerified DateTime?
  image         String?
  credits       Int       @default(0)
  createdAt     DateTime  @default(now())
  accounts      Account[]
  sessions      Session[]
  payments      Payment[]
  reports       Report[]
  reportAccess  ReportAccess[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Payment {
  id            String   @id @default(cuid())
  userId        String
  planId        String
  amount        Int
  credits       Int
  paymentMethod String
  status        String   @default("pending") // pending, completed, failed
  transactionId String?
  createdAt     DateTime @default(now())
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Report {
  id          String    @id @default(cuid())
  userId      String
  type        String    // 'free' | 'premium'
  vin         String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  data        String    @db.Text // JSON stringified report data
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  access      ReportAccess[]
}

model ReportAccess {
  id          String    @id @default(cuid())
  userId      String
  reportId    String
  type        String    // 'free' | 'premium'
  purchasedAt DateTime  @default(now())
  expiresAt   DateTime?
  credits     Int       @default(0)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  report      Report    @relation(fields: [reportId], references: [id], onDelete: Cascade)

  @@unique([userId, reportId])
}
